{"version":3,"sources":["constants.js","components/WarningMessage/index.jsx","components/Meter/Form.jsx","components/Meter/Meter.jsx","components/WarningMessage/warningmessage.module.css"],"names":["CONSTANTS","ERROR_MESSAGE","LIST_EMPTY_MESSAGE","ENDPOINT","LIST","METERDETAILS","METERSERIALNUMBERS","WarningMessage","open","text","onWarningClose","Fragment","className","classnames","styles","warningPosition","role","onClick","aria-label","aria-hidden","Form","params","useState","value","setValue","inputValue","setInputValue","items","setItems","warningMessageOpen","warningMessageText","warningMessage","setWarningMessage","useEffect","fetch","then","response","ok","Error","statusText","json","serialnumbers","catch","error","LIST_GET","onSubmit","e","preventDefault","plotChart","Autocomplete","freeSolo","onChange","event","newValue","onInputChange","newInputValue","id","disableClearable","options","map","item","style","width","renderInput","TextField","label","margin","variant","InputProps","type","Meter","textField","method","headers","itemAdded","LIST_ADD","serialnumber","averageWH","parseFloat","toFixed","averageVARH","xaxis","data","x","y","yaxisWHresult","name","marker","color","yaxisVARHresult","layout","b","height","yaxis","title","tickangle","titlefont","size","autosize","config","responsive","displaylogo","module","exports"],"mappings":"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","file":"static/js/4.9fec176c.chunk.js","sourcesContent":["const CONSTANTS = {};\r\n\r\nCONSTANTS.ERROR_MESSAGE = {};\r\n\r\n\r\nCONSTANTS.ERROR_MESSAGE.LIST_EMPTY_MESSAGE = \"Please enter a valid meter serial number.\";\r\n\r\nCONSTANTS.ENDPOINT = {};\r\n\r\nCONSTANTS.ENDPOINT.LIST = \"/api/list\";\r\nCONSTANTS.ENDPOINT.METERDETAILS = \"/api/meterData\";\r\nCONSTANTS.ENDPOINT.METERSERIALNUMBERS = \"/api/meterSerialNumbers\";\r\nexport default CONSTANTS;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styles from \"./warningmessage.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// A pop up message used to warn users about failed API calls to the back end\r\nconst WarningMessage = ({ open, text, onWarningClose }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {open && (\r\n        <div\r\n          className={classnames(\r\n            \"alert\",\r\n            \"alert-warning\",\r\n            \"ml-3\",\r\n            styles.warningPosition\r\n          )}\r\n          role=\"alert\"\r\n        >\r\n          {text}\r\n          <button\r\n            onClick={onWarningClose}\r\n            className=\"close ml-2\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nWarningMessage.propTypes = {\r\n  open: PropTypes.bool,\r\n  text: PropTypes.string,\r\n  onWarningClose:PropTypes.func\r\n}\r\n\r\nexport default WarningMessage;","import React, { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CONSTANTS from \"../../constants\";\r\nimport WarningMessage from \"../WarningMessage\";\r\nconst getSerialNumbers = () => {\r\n  let promiseList = fetch(CONSTANTS.ENDPOINT.METERSERIALNUMBERS)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      return response.json();\r\n    })\r\n  return promiseList;\r\n}\r\n\r\n\r\nconst Form = (params) => {\r\n\r\n  // const [textField, setTextField] = useState(\"\");\r\n  const [value, setValue] = useState(\"\");\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [items, setItems] = useState([]);\r\n  const [warningMessage, setWarningMessage] = useState({ warningMessageOpen: false, warningMessageText: \"\" });\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    params.plotChart(inputValue);\r\n    setInputValue(\"\");\r\n\r\n  }\r\n  const closeWarningMessage = () => {\r\n    setWarningMessage({\r\n      warningMessageOpen: false,\r\n      warningMessageText: \"\"\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSerialNumbers()\r\n      .then(serialnumbers => { setItems(serialnumbers) })\r\n      .catch(error =>\r\n        setWarningMessage({\r\n          warningMessageOpen: true,\r\n          warningMessageText: `${CONSTANTS.ERROR_MESSAGE.LIST_GET} ${error}`\r\n        })\r\n      );\r\n  }, []);\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"input-group my-3\">\r\n\r\n\r\n      <br />\r\n      <Autocomplete\r\n        freeSolo\r\n        value={value}\r\n        onChange={(event: any, newValue: string | null) => {\r\n          setValue(newValue);\r\n        }}\r\n        inputValue={inputValue}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        id=\"free-solo-2-demo\"\r\n        disableClearable\r\n        options={items.map((item) => item)}\r\n        style={{ width: 300 }}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Search Serial Number\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            InputProps={{ ...params.InputProps, type: 'search' }}\r\n          />\r\n        )}\r\n      />\r\n      <br />\r\n      <button type=\"submit\" className=\"btn btn-primary\">\r\n        Submit\r\n      </button>\r\n      <WarningMessage\r\n        open={warningMessage.warningMessageOpen}\r\n        text={warningMessage.warningMessageText}\r\n        onWarningClose={closeWarningMessage}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport WarningMessage from \"../WarningMessage\";\r\nimport CONSTANTS from \"../../constants\";\r\n\r\n\r\n// simplest method: uses precompiled complete bundle from `plotly.js`\r\nimport PlotlyChart from 'react-plotlyjs-ts';\r\n\r\n// customizable method: use your own `Plotly` object\r\n// import createPlotlyComponent from 'react-plotly.js/factory';\r\n// const Plot = createPlotlyComponent(Plotly);\r\n\r\nconst Meter = () => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [warningMessage, setWarningMessage] = useState({ warningMessageOpen: false, warningMessageText: \"\" });\r\n  const plotChart = (textField) => {\r\n    // Warning Pop Up if the user submits an empty message\r\n    if (!textField) {\r\n      setWarningMessage({\r\n        warningMessageOpen: true,\r\n        warningMessageText: CONSTANTS.ERROR_MESSAGE.LIST_EMPTY_MESSAGE\r\n      });\r\n      return;\r\n    }\r\n    fetch(`${CONSTANTS.ENDPOINT.METERDETAILS}/${textField}`, {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" }\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw Error(response.statusText);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(itemAdded => {\r\n        setItems(\"\");\r\n        setItems(itemAdded);\r\n      })\r\n      .catch(error =>\r\n        setWarningMessage({\r\n          warningMessageOpen: true,\r\n          warningMessageText: `${CONSTANTS.ERROR_MESSAGE.LIST_ADD} ${error}`\r\n        })\r\n      );\r\n  };\r\n\r\n  const closeWarningMessage = () => {\r\n    setWarningMessage({\r\n      warningMessageOpen: false,\r\n      warningMessageText: \"\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main id=\"mainContent\" className=\"container\">\r\n      <div className=\"row justify-content-center py-5\">\r\n        <h3>Dashboard</h3>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12 p-0\">\r\n          <Form plotChart={plotChart} />\r\n        </div>\r\n      </div>\r\n      {items.serialnumber ?\r\n        <div className=\"row\">\r\n          <div className=\"col-12 p-0\">\r\n            <label>\r\n              Meter Serial Number : <b> {items.serialnumber}</b>\r\n            </label>\r\n          </div>\r\n        </div> : null\r\n      }\r\n      {items.averageWH ?\r\n        <div className=\"row\">\r\n          <div className=\"col-12 p-0\">\r\n            <label>\r\n              The average half hourly WH values is : <b>{parseFloat(items.averageWH).toFixed(2)}</b>\r\n            </label>\r\n          </div>\r\n        </div> : null\r\n      }\r\n      {items.averageVARH ?\r\n        <div className=\"row\">\r\n          <div className=\"col-12 p-0\">\r\n            <label>\r\n              The average  half hourly VARH values is : <b> {parseFloat(items.averageVARH).toFixed(2)}</b>\r\n            </label>\r\n          </div>\r\n        </div> : null\r\n      }\r\n       {items.averageVARH ?\r\n        <div className=\"row\">\r\n          <div className=\"col-12 p-0\">\r\n            <label>\r\n              The below chart displays the trend of every half hourly values of WH and VARH.\r\n            </label>\r\n          </div>\r\n        </div> : null\r\n      }\r\n      {items.xaxis ?\r\n\r\n        <PlotlyChart\r\n          data={[\r\n            {\r\n              x: items.xaxis\r\n              ,\r\n              y: items.yaxisWHresult\r\n              ,\r\n              type: 'scatter',\r\n              width: 'auto',\r\n              name: 'WH',\r\n              marker: { color: 'blue' },\r\n            },\r\n            {\r\n              x: items.xaxis\r\n              ,\r\n              y: items.yaxisVARHresult\r\n              ,\r\n              type: 'scatter',\r\n              width: 'auto',\r\n              name: 'VARH',\r\n              marker: { color: 'red' },\r\n            }\r\n          ]}\r\n          layout={{\r\n            margin: { b: 150 },\r\n            width: 1028, height: 400,\r\n            yaxis: { title: 'Unit', tickangle: 270, titlefont: { size: 18 } },\r\n            xaxis: { title: 'Date', titlefont: { size: 18 } },\r\n\r\n            autosize: true,\r\n            title: 'Meter Graph with WH and VARH'\r\n          }}\r\n          config={{ responsive: true, displaylogo: false }}\r\n        /> : null}\r\n      <WarningMessage\r\n        open={warningMessage.warningMessageOpen}\r\n        text={warningMessage.warningMessageText}\r\n        onWarningClose={closeWarningMessage}\r\n      />\r\n\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Meter;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"warningPosition\":\"warningmessage_warningPosition__2OitO\"};"],"sourceRoot":""}